#
# Copyright 1999-2025 Alibaba Group Holding Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Common messages
nacos.api.auth.description=Get `accessToken` by `login` API.

# Client OpenAPI basic information
nacos.client.api.title=Nacos HTTP Client API
nacos.client.api.description=Nacos HTTP Client API openAPI(swagger) type document，used for some program languages that no support grpc feature to develop Nacos client.

# InstanceOpenApiController
nacos.client.naming.instance.api.controller.name=Nacos Naming HTTP Client APIs
nacos.client.naming.instance.api.controller.description=**HTTP Client APIs for Nacos Naming, used for service instance registration, deregistration, and querying instance lists. Note:** In Nacos 3.X, the HTTP Client APIs do `NOT` provide interfaces to retrieve all service names or other system-wide operations. `Ordinary applications`, `microservices`, and `non-management/non-gateway applications` **should only require** registering themselves as an instance of a specific service, deregistering an instance, or fetching instance lists of known downstream services for direct business calls. **They should NOT need** to retrieve all services in the registry. To obtain the full service list, use the **Admin APIs**.
nacos.client.naming.instance.api.register.summary=Register/Heartbeat an instance
nacos.client.naming.instance.api.register.description=Registers or renews an instance in a specified service. **Note:** When using the HTTP Client API to register an ephemeral instance, periodic heartbeat renewal is required. In Nacos 3.X, the heartbeat API is merged with registration. The `heartBeat` parameter distinguishes between registration and heartbeat requests. During heartbeats, the server ignores parameters like `healthy`, `weight`, `enabled`, and `metadata`. If a heartbeat response returns error code `21003`, the instance has been expired and removed. The client should re-register with full metadata (setting `heartBeat=false`) before retrying heartbeat. While repeated registration can also renew the instance, this consumes more resources; prefer heartbeating after a successful initial registration for performance efficiency.
nacos.client.naming.instance.api.deregister.summary=Deregister an instance
nacos.client.naming.instance.api.deregister.description=Deregisters an instance from a specified service.
nacos.client.naming.instance.api.list.summary=List service instances
nacos.client.naming.instance.api.list.description=Retrieves the list of instances under a specific service. **Note:** As Nacos 3.X will deprecate UDP-based event pushing, clients unable to use gRPC long-polling connections should periodically poll instance lists through HTTP requests to stay synchronized with registry changes for service subscription purposes.

# ConfigOpenApiController
nacos.client.config.config.api.controller.name=Nacos Config HTTP Client APIs
nacos.client.config.config.api.controller.description=**HTTP Client APIs for Nacos Configuration Center, used for fetching configuration content. Note:** In Nacos 3.X, the HTTP Client APIs do `NOT` support configuration publishing or deletion. `Ordinary applications`, `microservices`, and `non-management/non-gateway applications` **should act as consumers** rather than publishers of configurations. For configuration publishing/deletion needs, use the **Admin APIs**.
nacos.client.config.config.api.get.summary=Get configuration content
nacos.client.config.config.api.get.description=Retrieves the content of a specific configuration. **Note:** Since Nacos 3.X will remove long-polling based configuration listening, clients should instead periodically call the `Get Configuration` API and compare MD5 checksums to detect and reload updated configurations.

# Admin OpenAPI basic information
nacos.admin.api.title=Nacos Admin APIs
nacos.admin.api.description=The OpenAPI (Swagger) documentation for Nacos Admin APIs, which are used by Nacos maintainers for troubleshooting and cluster control operations, and provide `management-type` and `gateway-type` applications with capabilities to perform **wide-range data queries** across the system.

# ServerStateController
nacos.admin.core.state.api.controller.name=Nacos State APIs
nacos.admin.core.state.api.controller.description=Retrieve the Nacos' state, readiness or liveness.
nacos.admin.core.state.api.state.summary=Get cluster status information
nacos.admin.core.state.api.state.description=This interface retrieves the Nacos cluster's foundational status and configuration, such as version number, operational mode, and authentication status. It does not return node-level cluster details.
nacos.admin.core.state.api.liveness.summary=Get Nacos liveness status
nacos.admin.core.state.api.liveness.description=This interface checks if the Nacos is operational and able to respond to requests.
nacos.admin.core.state.api.readiness.summary=Get Nacos readiness status
nacos.admin.core.state.api.readiness.description=This interface checks if the Nacos is ready to read data from the cluster.

# ServerLoaderControllerV3
nacos.admin.core.loader.api.controller.name=Nacos Connection Load Management APIs
nacos.admin.core.loader.api.controller.description=APIs for managing Nacos cluster connection load, providing statistics, connection details, and various connection balancing capabilities.
nacos.admin.core.loader.api.list.summary=List current node connections
nacos.admin.core.loader.api.list.description=This interface retrieves details of gRPC connections currently established to the local Nacos Server node.
nacos.admin.core.loader.api.reload.batch.summary=Balance specified number of connections
nacos.admin.core.loader.api.reload.batch.description=This interface disconnects a specified number of gRPC connections from the current node and migrates them to other Nacos Server nodes.
nacos.admin.core.loader.api.reload.smart.summary=Automatically balance cluster connections
nacos.admin.core.loader.api.reload.smart.description=This interface enables Nacos to automatically migrate connections across nodes based on real-time load conditions to achieve optimal distribution.
nacos.admin.core.loader.api.reload.single.summary=Migrate specific client connection
nacos.admin.core.loader.api.reload.single.description=This interface transfers a specified gRPC client connection to another Nacos Server node.

nacos.admin.core.loader.api.metrics.summary=Cluster connection overview
nacos.admin.core.loader.api.metrics.description=This interface provides aggregated connection statistics across all nodes in the Nacos Server cluster, showing per-node connection counts.

# NamespaceControllerV3
nacos.admin.core.namespace.api.controller.name=Nacos Namespace APIs
nacos.admin.core.namespace.api.controller.description=Routines to manage namespaces in the Nacos: list, retrieve, create, update, delete namespaces, and validate namespace IDs.
nacos.admin.core.namespace.api.list.summary=List Nacos namespaces
nacos.admin.core.namespace.api.list.description=Retrieves the list of namespaces in the current Nacos cluster.
nacos.admin.core.namespace.api.get.summary=Get namespace details
nacos.admin.core.namespace.api.get.description=Renders detailed information of a specific namespace.
nacos.admin.core.namespace.api.create.summary=Create a new namespace
nacos.admin.core.namespace.api.create.description=Creates a new namespace with a custom ID and metadata.
nacos.admin.core.namespace.api.update.summary=Update a namespace
nacos.admin.core.namespace.api.update.description=Updates non-ID attributes of a namespace (e.g., name, description). The namespace ID itself cannot be modified.
nacos.admin.core.namespace.api.delete.summary=Delete a namespace
nacos.admin.core.namespace.api.delete.description=Deletes a namespace. The default `public` namespace cannot be deleted.
nacos.admin.core.namespace.api.check.summary=Validate namespace existence
nacos.admin.core.namespace.api.check.description=Verifies if a namespace ID exists. This is used during namespace creation to prevent ID conflicts.

# NacosClusterControllerV3
nacos.admin.core.cluster.api.controller.name=Nacos Cluster APIs
nacos.admin.core.cluster.api.controller.description=Routines to retrieve cluster information for the Nacos cluster.
nacos.admin.core.cluster.api.node.self.summary=Get runtime information of Nacos current node
nacos.admin.core.cluster.api.node.self.description=This interface retrieves operational details of Nacos current node, including node IP addresses, status, and metadata.
nacos.admin.core.cluster.api.node.list.summary=Get runtime information of Nacos nodes
nacos.admin.core.cluster.api.node.list.description=This interface retrieves operational details of Nacos nodes, including node IP addresses, status, and metadata.等。
nacos.admin.core.cluster.api.node.update.summary=Update Nacos runtime information
nacos.admin.core.cluster.api.node.update.description=This interface allows updating the detailed information of Nacos nodes in the current node's list. **Note:** This operation will **overwrite** the existing node details in the current node's list. It only updates nodes that exist in the cluster and **cannot** be used to add or remove nodes from the cluster. Additionally, Nacos' internal **health-check reporting tasks** will continuously monitor and update node information. If detected changes occur after invoking this interface, the reporting tasks may overwrite the node details in the current list with the latest discovered status.
nacos.admin.core.cluster.api.lookup.update.summary=Update Nacos Cluster Address Discovery Mode
nacos.admin.core.cluster.api.lookup.update.description=This interface allows modifying the address discovery mode for the current node to locate other Nacos cluster nodes. The default mode depends on startup configuration: **`file`** (cluster mode) or **`standalone`** (single-node mode). Additional supported values include **`address-server`** for centralized discovery via a dedicated server.

# CoreOpsControllerV3
nacos.admin.core.ops.api.controller.name=Nacos Core Engine Operations APIs
nacos.admin.core.ops.api.controller.description=Core operational APIs for managing the Nacos cluster, including executing Raft protocol commands, retrieving ID generator information, and dynamically adjusting logging levels without restarting the server.
nacos.admin.core.ops.api.raft.summary=Raft Protocol Operations
nacos.admin.core.ops.api.raft.description=This interface allows performing specific Raft protocol operations on the Nacos Server cluster, such as triggering manual snapshots or initiating a **forced leader election**.
nacos.admin.core.ops.api.ids.summary=Retrieve ID Generator Information
nacos.admin.core.ops.api.ids.description=This interface retrieves the current ID and worker ID from the Nacos ID generator. **Note:** This interface only returns valid data when using the **built-in database** (e.g., not an external database).
nacos.admin.core.ops.api.log.summary=Dynamic Logging Level Adjustment
nacos.admin.core.ops.api.log.description=This interface enables dynamically modifying the logging levels of Nacos Core components **without restarting the server**, allowing real-time adjustments to logging verbosity for troubleshooting or monitoring purposes.

# ServiceControllerV3
nacos.admin.naming.service.api.controller.name=Nacos Naming Service APIs
nacos.admin.naming.service.api.controller.description=Operations related to services in the Nacos Naming Center, including creating/deleting services, listing services, retrieving service details, querying service subscribers, and more.
nacos.admin.naming.service.api.create.summary=Create a Service
nacos.admin.naming.service.api.create.description=This interface creates an empty service.
nacos.admin.naming.service.api.delete.summary=Delete a Service
nacos.admin.naming.service.api.delete.description=This interface deletes a service. Note: This is service deletion, NOT instance deletion. A service cannot be deleted if it has existing service instances.
nacos.admin.naming.service.api.update.summary=Update Service Metadata
nacos.admin.naming.service.api.update.description=This interface updates metadata of a service (e.g., `metadata`, `selector`). Immutable fields include `serviceName`, `groupName`, and `namespaceId`.
nacos.admin.naming.service.api.selector.summary=List Supported Service Selectors
nacos.admin.naming.service.api.selector.description=This interface retrieves the list of supported service selectors.
nacos.admin.naming.service.api.subscribers.summary=List Service Subscribers
nacos.admin.naming.service.api.subscribers.description=This interface retrieves the list of subscribers for a specified service.
nacos.admin.naming.service.api.list.summary=List Services
nacos.admin.naming.service.api.list.description=This interface retrieves the list of services under a specified namespace. The response format depends on the `withInstances` parameter:`withInstances=true`: Returns service details with instances (`ServiceDetailInfo` objects). `withInstances=false`: Returns service metadata without instances (`ServiceView` objects).
nacos.admin.naming.service.api.get.summary=Retrieve Service Details
nacos.admin.naming.service.api.get.description=This interface retrieves detailed information of a specified service, including metadata and configuration.

# ClusterControllerV3
nacos.admin.naming.service.api.update.cluster.summary=Update Service Cluster Metadata
nacos.admin.naming.service.api.update.cluster.description=This interface updates metadata for a specific service cluster.

# InstanceControllerV3
nacos.admin.naming.instance.api.controller.name=Nacos Naming Service Instance APIs
nacos.admin.naming.instance.api.controller.description=Operations related to service instances in the Nacos Naming Center, including retrieving instance lists and updating instance metadata.
nacos.admin.naming.instance.api.register.summary=Register Instance
nacos.admin.naming.instance.api.register.description=Registers a new instance under a specified service.
nacos.admin.naming.instance.api.deregister.summary=Deregister Instance
nacos.admin.naming.instance.api.deregister.description=Deregister an instance from a specified service.
nacos.admin.naming.instance.api.update.description=This interface updates metadata of specified service instances (e.g., `weight`, `enabled`). Unmodifiable fields include `serviceName`, `groupName`, `namespace`, `IP`, and `port`.
nacos.admin.naming.instance.api.update.summary=Update Instance Metadata
nacos.admin.naming.instance.api.update.batch.summary=Batch Update Instance Metadata
nacos.admin.naming.instance.api.update.batch.description=Batch updates metadata for specified instances.
nacos.admin.naming.instance.api.delete.batch.summary=Batch Delete Instance Metadata
nacos.admin.naming.instance.api.delete.batch.description=Batch deletes metadata for specified instances.
nacos.admin.naming.instance.api.partial.summary=Partial Update Instance
nacos.admin.naming.instance.api.partial.description=Update specific fields of an instance. Note: This interface supports incremental metadata updates. For example, first applying `k1=v1` and then `k2=v2` results in merged metadata `k1=v1,k2=v2`.
nacos.admin.naming.instance.api.list.summary=List Service Instances
nacos.admin.naming.instance.api.list.description=This interface retrieves the list of instances for a specified service.
nacos.admin.naming.instance.api.get.summary=Get Instance Details
nacos.admin.naming.instance.api.get.description=Retrieves detailed metadata and status of a specified instance.

# HealthControllerV3
nacos.admin.naming.health.api.controller.name=Nacos Service Instance Health Check APIs
nacos.admin.naming.health.api.controller.description=APIs for managing health status and configurations of service instances in Nacos registry, including health status updates and health checker type queries.
nacos.admin.naming.health.api.update.summary=Update Instance Health Status
nacos.admin.naming.health.api.update.description=Updates the health status of a specified instance. **Note:** This operation is `only effective for non-ephemeral instances` of services where the `health check type is set to NONE`. For ephemeral instances, health status is maintained by client connections. For other health check types (e.g., HTTP/TCP), the health check task automatically manages status updates, so manual changes may be overwritten by subsequent automated checks.
nacos.admin.naming.health.api.checkers.summary=List Supported Health Checkers
nacos.admin.naming.health.api.checkers.description=Retrieves all available health check types (e.g., HTTP, TCP, CUSTOM) and their configuration options supported by the Nacos system.

# ClientControllerV3
nacos.admin.naming.client.api.controller.name=Nacos Naming Client APIs
nacos.admin.naming.client.api.controller.description=APIs for managing and querying client connectivity information in the Nacos registry. Capabilities include listing clients, retrieving client details, inspecting services they publish/subscribe to, and reverse-lookup clients associated with specific services. **Note:** `Client` here refer to abstract Nacos connectivity channels representing interactions between Nacos clients and the Nacos server cluster.
nacos.admin.naming.client.api.list.summary=List All Clients
nacos.admin.naming.client.api.list.description=Retrieves the complete list of active Nacos clients tracked by the registry.
nacos.admin.naming.client.api.get.summary=Get Client Details
nacos.admin.naming.client.api.get.description=Obtains detailed metadata for a specific client identified by its client ID.
nacos.admin.naming.client.api.publish.list.summary=List Published Services by Client
nacos.admin.naming.client.api.publish.list.description=Discovers all services that a specified client has registered instances in.
nacos.admin.naming.client.api.subscribe.list.summary=List Subscribed Services by Client
nacos.admin.naming.client.api.subscribe.list.description=Identifies all services a specific client is subscribed to for service discovery.
nacos.admin.naming.client.api.service.publisher.list.summary=Find Clients Publishing a Service
nacos.admin.naming.client.api.service.publisher.list.description=Locates all clients that have registered at least one instance in the specified service.
nacos.admin.naming.client.api.service.subscriber.list.summary=Find Clients Subscribing to a Service
nacos.admin.naming.client.api.service.subscriber.list.description=Identifies all clients actively discovering instances of the specified service.
nacos.admin.naming.client.api.distro.summary=Determine Client's Responsible Server Node
nacos.admin.naming.client.api.distro.description=Discovers which Nacos server node is responsible for managing a client's connection based on its IP:port. **Important Note:** Only applicable to persistent service instances or temporary instances registered via operation APIs. **Clients with temporary instances created via 2.x or higher client libraries cannot be located through this interface.**

# OperatorControllerV3
nacos.admin.naming.ops.api.controller.name=Nacos Naming Operations APIs
nacos.admin.naming.ops.api.controller.description=Operational APIs for managing Nacos Naming module configurations, including querying/adjusting operational switches, modifying logging levels, and retrieving system metrics.
nacos.admin.naming.ops.api.switches.get.summary=View Naming Operational Switches
nacos.admin.naming.ops.api.switches.get.description=Retrieves the current configuration of operational switches controlling Nacos Naming module behaviors.
nacos.admin.naming.ops.api.switches.update.summary=Update Naming Operational Switches
nacos.admin.naming.ops.api.switches.update.description=Modifies the configuration of operational switches to adjust Nacos Naming module behaviors (e.g., enable/disable specific features).
nacos.admin.naming.ops.api.metrics.summary=Get System Metrics
nacos.admin.naming.ops.api.metrics.description=Retrieves real-time operational metrics including instance counts, service counts, and connection statistics for the Nacos Naming module.
nacos.admin.naming.ops.api.log.summary=Adjust Log Levels
nacos.admin.naming.ops.api.log.description=Dynamically modifies log levels for specific Nacos Naming components without requiring server restarts.

#ConfigControllerV3 & ListenerControllerV3
nacos.admin.config.config.api.controller.name=Nacos Configuration Center APIs
nacos.admin.config.config.api.controller.description=Nacos operations for the configuration center, including retrieving configuration lists, fetching configuration details, publishing configurations, deleting configurations, batch deletion, searching configurations, listening for configuration changes, exporting configurations, importing configurations, and more.
nacos.admin.config.config.api.get.summary=Get Configuration Details
nacos.admin.config.config.api.get.description=This interface retrieves the details of the specified configuration.
nacos.admin.config.config.api.publish.summary=Publish Configuration
nacos.admin.config.config.api.publish.description=This interface enables the creation of new configurations or updating existing ones.
nacos.admin.config.config.api.delete.summary=Delete Configuration
nacos.admin.config.config.api.delete.description=This interface deletes the specified configuration.
nacos.admin.config.config.api.delete.batch.summary=Batch Delete Configurations
nacos.admin.config.config.api.delete.batch.description=This interface allows for the deletion of multiple specified configurations.
nacos.admin.config.config.api.list.summary=List Configurations
nacos.admin.config.config.api.list.description=This interface retrieves the list of configurations under a specified namespace.
nacos.admin.config.config.api.search.summary=Search Configurations by Content
nacos.admin.config.config.api.search.description=This interface searches for configurations based on their content. **Note: This interface has lower performance; frequent use may cause stability issues. Use other interfaces whenever possible.**
nacos.admin.config.config.api.listener.summary=List Configuration Listeners
nacos.admin.config.config.api.listener.description=This interface retrieves the list of listeners subscribed to a specific configuration.
nacos.admin.config.config.api.listener.ip.summary=Query Configurations Subscribed by an IP
nacos.admin.config.config.api.listener.ip.description=This interface lists the configurations subscribed to by a specific client IP address.
nacos.admin.config.config.api.export.summary=Export Configurations
nacos.admin.config.config.api.export.description=This interface exports selected or queried configurations as a ZIP file for backup or migration to another Nacos cluster. ** Note: Use either ids or dataId + groupName combinations exclusively. Mixing parameters may result in an empty ZIP file. **
nacos.admin.config.config.api.import.summary=Import Configurations
nacos.admin.config.config.api.import.description=This interface imports configurations from a ZIP file (exported from Nacos) into a specified namespace. ** Note: The import interface currently supports ZIP files from older and newer export formats, but support for older formats will be deprecated. Use the new export interface for future compatibility.**
nacos.admin.config.config.api.import.body.description=The zip file must be the one exported via the configuration export feature. If using a self-created zip file, its content structure **must exactly match** the format of the exported zip file. Any additional directories or hidden files may cause import failure.
nacos.admin.config.config.api.clone.summary=Clone Configurations
nacos.admin.config.config.api.clone.description=This interface clones selected or queried configurations into other namespaces.
nacos.admin.config.config.api.delete.beta.summary=Terminate Configuration Beta Release Status
nacos.admin.config.config.api.delete.beta.description=This interface stops a configuration's beta release by reverting its beta status. **Note: Only applicable if the configuration was marked for beta release with the betaIps header during publishing.**
nacos.admin.config.config.api.get.beta.summary=Check Beta Release Status of a Configuration
nacos.admin.config.config.api.get.beta.description=This interface checks whether a configuration is in a beta release state. **Note: Only valid for configurations marked as beta releases with the betaIps header during publishing.**

# HistoryControllerV3
nacos.admin.config.history.api.controller.name=Nacos Configuration History APIs
nacos.admin.config.history.api.controller.description=Operations related to configuration history versions in the Nacos Configuration Center, including retrieving historical version lists, viewing details of historical versions, and more.
nacos.admin.config.history.api.get.summary=Retrieve a Specific Configuration History Change Record
nacos.admin.config.history.api.get.description=This interface retrieves a specific historical change record of a configuration.
nacos.admin.config.history.api.list.summary=List Configuration Publish History
nacos.admin.config.history.api.list.description=This interface retrieves the complete publish history of a configuration.
nacos.admin.config.history.api.previous.summary=Retrieve Previous Change History Before the Latest Version
nacos.admin.config.history.api.previous.description=This interface retrieves the most recent change history before the current latest version of the configuration.
nacos.admin.config.history.api.names.summary=List Configurations Under a Namespace
nacos.admin.config.history.api.names.description=This interface retrieves a list of configurations under a specified namespace, returning only `dataId` and `groupName` fields for use in UI dropdown menus.

# CapacityControllerV3
nacos.admin.config.capacity.api.controller.name=Nacos Configuration Capacity APIs
nacos.admin.config.capacity.api.controller.description=APIs for managing configuration capacity and quota settings in the Nacos configuration center, including retrieving and updating capacity configurations.
nacos.admin.config.capacity.api.get.summary=Get Capacity Information
nacos.admin.capacity.config.api.get.description=Retrieves capacity information for a specified group or namespace.
nacos.admin.config.capacity.api.update.summary=Update Capacity Information
nacos.admin.capacity.config.api.update.description=Updates capacity configuration for a specified group or namespace. If the capacity is not initialized, it will be automatically initialized during the update.

# ConfigOpsControllerV3
nacos.admin.config.ops.api.controller.name=Nacos Configuration Operations APIs
nacos.admin.config.ops.api.controller.description=Operational APIs for the Nacos configuration center, including manual cache management, log level adjustments, Derby database operations, and data import/export functions.
nacos.admin.config.ops.api.localCache.summary=Trigger Local Cache Reload
nacos.admin.config.ops.api.localCache.description=Manually triggers reloading all configuration data from persistent storage into the local in-memory cache.
nacos.admin.config.ops.api.log.summary=Set Log Level
nacos.admin.config.ops.api.log.description=Dynamically adjusts the log level for a specific configuration module without restarting the server.
nacos.admin.config.ops.api.derby.summary=Execute Derby Database Query
nacos.admin.config.ops.api.derby.description=Executes **SELECT** queries directly on the Derby database. **Note:** Requires `nacos.config.derby.ops.enabled=true` and is only available when using Derby as the database. Intended for operations staff to troubleshoot data issues.
nacos.admin.config.ops.api.derby.import.summary=Import Data into Derby
nacos.admin.config.ops.api.derby.import.description=Imports configuration data from external sources into the Derby database. **Note:** Requires `nacos.config.derby.ops.enabled=true` and is only available when using Derby as the database. Use strictly for data recovery operations by operations staff.

# MetricsControllerV3
nacos.admin.config.metrics.api.controller.name=Nacos Configuration Client Monitoring APIs
nacos.admin.config.metrics.api.controller.description=APIs for monitoring client interactions with the Nacos configuration center, including cluster-wide and local client metrics.
nacos.admin.config.metrics.api.cluster.summary=Get Cluster Client Metrics
nacos.admin.config.metrics.api.cluster.description=Retrieves configuration-related metrics for a specific client IP address across the entire cluster.
nacos.admin.config.metrics.api.ip.summary=Get Local Client Metrics
nacos.admin.config.metrics.api.ip.description=Retrieves configuration-related metrics for a specific client IP address connected to the local Nacos server instance.