#
# Copyright 1999-2025 Alibaba Group Holding Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Common messages
nacos.api.auth.description=传入通过`login`接口获得的`accessToken`

# Client OpenAPI basic information
nacos.client.api.title=Nacos HTTP 客户端 API
nacos.client.api.description=Nacos HTTP 客户端 API openAPI(swagger) 类型文档，用于部分不支持Grpc能力的编程语言进行 Nacos 客户端开发。

# InstanceOpenApiController
nacos.client.naming.instance.api.controller.name=Nacos注册中心相关API
nacos.client.naming.instance.api.controller.description=**Nacos注册中心的HTTP 客户端API，用于注册、注销、获取实例列表操作。注意：**Nacos 3.X 的HTTP 客户端API 不提供查询所有服务列表等接口，`普通应用`、`微服务应用`，以及其他 `非管控类` 和 `非网关类` 应用 **应该**仅需要注册为某一服务的实例，或从某一服务中注销自身，亦或获取已知的下游服务的实例列表进行实际的业务调用，**不应该**获取所有注册中心中的服务列表。若需要获取所有服务列表，请使用`运维 API`。
nacos.client.naming.instance.api.register.summary=注册服务实例/续约服务实例
nacos.client.naming.instance.api.register.description=注册或续约一个实例到指定的服务中。**注意：**当通过HTTP 客户端 API注册的实例为临时实例时，需要定期对实例进行续约，在Nacos3.X的HTTP 客户端API中，续约此实例的API和注册实例的API进行了合并，通过参数`heartBeat`进行区分。当为续约请求时， Nacos不会对请求中的元数据等内容进行解析，即续约请求将会忽略传入的`healthy`,`weight`,`enabled`,`metadata` 字段。 当续约请求返回的错误码为`21003` 时，说明该实例已过期被移除，需要重新进行注册，此时客户端应带上完整的信息，同时设置`heartBeat=false`进行重新注册，重新注册成功后再进行续约请求。若连续调用注册请求，也可以起到`续约实例`的作用，但是是通过`更新实例`的方式进行续约，会耗费更多的性能，因此请在注册成功后进行续约操作而非继续进行注册更新。
nacos.client.naming.instance.api.deregister.summary=注销服务实例
nacos.client.naming.instance.api.deregister.description=从一个指定服务中注销实例。
nacos.client.naming.instance.api.list.summary=查询服务实例列表
nacos.client.naming.instance.api.list.description=查询指定服务下的实例列表。**注意：**由于Nacos3.X即将移除UDP类型的推送支持，因此对于不支持Grpc长连接推送的客户端，需要定期进行一次实例列表的拉取，以保证客户端能及时感知到实例列表的变化，以实现订阅服务的功能。

# ConfigOpenApiController
nacos.client.config.config.api.controller.name=Nacos配置中心相关API
nacos.client.config.config.api.controller.description=**Nacos配置中心的HTTP 客户端API，用于获取配置信息操作。注意：**Nacos 3.X 的HTTP 客户端API 不提供配置的发布和删除接口，`普通应用`、`微服务应用`，以及其他 `非管控类` 和 `非网关类` 应用**应该** 为配置的使用方而非发布方；若需要进行配置发布和删除操作，请使用`运维 API`。
nacos.client.config.config.api.get.summary=查询配置内容
nacos.client.config.config.api.get.description=查询指定配置的详细内容。**注意：**由于Nacos 3.X 即将移除配置长轮询监听相关的功能，仅保留通过长连接进行配置监听，因此Nacos 3.X 的HTTP 客户端API 不提供配置的监听接口。您可以通过轮询`获取配置`，比对前后的`md5`来判断是否需要更新配置。

# Admin OpenAPI basic information
nacos.admin.api.title=Nacos 运维 API
nacos.admin.api.description=Nacos 运维 API openAPI(swagger) 类型文档，用于Nacos运维人员进行问题排查，集群控制等操作，同时为`管控类`和`网关类`应用提供范围型数据查询的能力。

# ServerStateController
nacos.admin.core.state.api.controller.name=Nacos引擎状态相关API
nacos.admin.core.state.api.controller.description=获取Nacos引擎状态的相关API，提供Nacos集群状态信息及健康状态等。
nacos.admin.core.state.api.state.summary=获取Nacos集群状态信息
nacos.admin.core.state.api.state.description=通过该接口，可以获取到Nacos 集群的基础状态和开关信息，例如：版本号，运行模式，鉴权是否开启等；该接口不会返回Nacos 集群的节点信息。
nacos.admin.core.state.api.liveness.summary=获取Nacos集群的存活状态
nacos.admin.core.state.api.liveness.description=通过该接口，可以获取Nacos集群的存活状态，Nacos集群是否可正常接受和响应请求。
nacos.admin.core.state.api.readiness.summary=获取Nacos集群的可读状态
nacos.admin.core.state.api.readiness.description=通过该接口，可以获取Nacos集群的是否处于可读取状态，即Nacos集群是否可以读取到数据。

# ServerLoaderControllerV3
nacos.admin.core.loader.api.controller.name=Nacos引擎连接负载相关API
nacos.admin.core.loader.api.controller.description=Nacos集群连接负载的相关API，提供Nacos集群连接负载的统计、连接详情及各类连接均衡的能力。
nacos.admin.core.loader.api.list.summary=查询当前节点连接列表
nacos.admin.core.loader.api.list.description=通过该接口，可以获取连接到当前Nacos Server节点中的gRPC连接详情。
nacos.admin.core.loader.api.reload.batch.summary=均衡指定数量的连接
nacos.admin.core.loader.api.reload.batch.description=通过该接口，可以指定一定数量的连接到当前Nacos Server节点中的gRPC连接，将这部分连接断开后迁移到其他Nacos Server节点中。
nacos.admin.core.loader.api.reload.smart.summary=自动均衡集群中的连接
nacos.admin.core.loader.api.reload.smart.description=通过该接口，可以让Nacos根据各个节点的负载情况，自动将连接迁移到其他Nacos Server节点中。
nacos.admin.core.loader.api.reload.single.summary=均衡指定的单个连接
nacos.admin.core.loader.api.reload.single.description=通过该接口，可以将指定的客户端连接(gRPC连接)迁移到其他Nacos Server节点中。
nacos.admin.core.loader.api.metrics.summary=查询集群连接概览信息
nacos.admin.core.loader.api.metrics.description=通过该接口，查看Nacos Server集群中各节点的连接数概览。

# NamespaceControllerV3
nacos.admin.core.namespace.api.controller.name=Nacos集群命名空间相关API
nacos.admin.core.namespace.api.controller.description=Nacos集群命名空间相关操作，获取命名空间列表，获取命名空间详情，创建命名空间，更新命名空间，删除命名空间，校验命名空间存在等。
nacos.admin.core.namespace.api.list.summary=获取Nacos命名空间列表
nacos.admin.core.namespace.api.list.description=通过该接口，可以获取当前Nacos集群的命名空间列表。
nacos.admin.core.namespace.api.get.summary=获取命名空间详情
nacos.admin.core.namespace.api.get.description=通过该接口，可以获取指定命名空间的详情。
nacos.admin.core.namespace.api.create.summary=创建新命名空间
nacos.admin.core.namespace.api.create.description=通过该接口，可以创建新的命名空间。
nacos.admin.core.namespace.api.update.summary=更新命名空间
nacos.admin.core.namespace.api.update.description=通过该接口，可以更新命名空间的信息，无法更新命名空间ID，仅能更新命名空间的名称和描述。
nacos.admin.core.namespace.api.delete.summary=删除命名空间
nacos.admin.core.namespace.api.delete.description=通过该接口，可以删除命名空间。默认命名空间`public`无法被删除。
nacos.admin.core.namespace.api.check.summary=检查命名空间是否存在
nacos.admin.core.namespace.api.check.description=通过该接口，可以检查命名空间ID是否存在。应该在创建命名空间前调用，确认自定义的命名空间ID是否已经存在，以防冲突。

# NacosClusterControllerV3
nacos.admin.core.cluster.api.controller.name=Nacos引擎集群相关API
nacos.admin.core.cluster.api.controller.description=获取Nacos集群所对应的Nacos集群的集群信息
nacos.admin.core.cluster.api.node.self.summary=获取当前Nacos节点运行信息
nacos.admin.core.cluster.api.node.self.description=通过该接口，可以获取当前Nacos节点的运行信息，包括节点ip，节点运行状态，节点元数据等。
nacos.admin.core.cluster.api.node.list.summary=获取Nacos节点列表运行信息
nacos.admin.core.cluster.api.node.list.description=通过该接口，可以获取集群中所有Nacos节点运行信息，包括节点ip，节点运行状态，节点元数据等。
nacos.admin.core.cluster.api.node.update.summary=更新Nacos节点信息
nacos.admin.core.cluster.api.node.update.description=通过该接口，可以更新当前节点中的Nacos节点列表的详细信息。**注意：** 该接口会覆盖当前节点中列表中的详细信息，仅更新传入的节点中存在于集群中的节点，并`不能`通过此接口添加和减少集群中的节点。同时，Nacos自身的健康探测`report`任务也会对当前节点中列表中的节点进行健康探测及更新详细信息，若调用此接口后，探测任务发现节点信息有变更，则任务也会覆盖当前节点中列表中的节点信息。
nacos.admin.core.cluster.api.lookup.update.summary=更新Nacos集群的地址发现模式
nacos.admin.core.cluster.api.lookup.update.description=通过该接口，可以更新当前节点发现其他Nacos集群节点的模式，根据启动方式默认为`file`(集群模式）或`standalone`（单机模式），其他可选值有`address-server`。

# CoreOpsControllerV3
nacos.admin.core.ops.api.controller.name=Nacos引擎核心运维操作相关API
nacos.admin.core.ops.api.controller.description=对Nacos集群的核心运维操作，如：执行Nacos集群的Raft命令、获取Nacos集群的ID生成器信息、修改Nacos集群的日志级别等。
nacos.admin.core.ops.api.raft.summary=Raft 相关操作
nacos.admin.core.ops.api.raft.description=通过该接口，可以对Nacos Server集群中的Raft协议进行部分运维操作，如执行快照，主动选主等。
nacos.admin.core.ops.api.ids.summary=获取ID生成器信息
nacos.admin.core.ops.api.ids.description=通过该接口，获取ID生成器的当前ID,workerId. 只有使用内置数据库时该接口才会返回有效数据.
nacos.admin.core.ops.api.log.summary=动态修改Nacos Core相关日志级别
nacos.admin.core.ops.api.log.description=通过该接口，可以在不重启Nacos Server的情况下，动态修改Nacos Core相关日志级别的配置。
