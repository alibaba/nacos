#
# Copyright 1999-2025 Alibaba Group Holding Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Common messages
nacos.api.auth.description=传入通过`login`接口获得的`accessToken`

# Client OpenAPI basic information
nacos.client.api.title=Nacos HTTP 客户端 API
nacos.client.api.description=Nacos HTTP 客户端 API openAPI(swagger) 类型文档，用于部分不支持Grpc能力的编程语言进行 Nacos 客户端开发。

# InstanceOpenApiController
nacos.client.naming.instance.api.controller.name=Nacos注册中心相关API
nacos.client.naming.instance.api.controller.description=**Nacos注册中心的HTTP 客户端API，用于注册、注销、获取实例列表操作。注意：**Nacos 3.X 的HTTP 客户端API 不提供查询所有服务列表等接口，`普通应用`、`微服务应用`，以及其他 `非管控类` 和 `非网关类` 应用 **应该**仅需要注册为某一服务的实例，或从某一服务中注销自身，亦或获取已知的下游服务的实例列表进行实际的业务调用，**不应该**获取所有注册中心中的服务列表。若需要获取所有服务列表，请使用`运维 API`。
nacos.client.naming.instance.api.register.summary=注册服务实例/续约服务实例
nacos.client.naming.instance.api.register.description=注册或续约一个实例到指定的服务中。**注意：**当通过HTTP 客户端 API注册的实例为临时实例时，需要定期对实例进行续约，在Nacos3.X的HTTP 客户端API中，续约此实例的API和注册实例的API进行了合并，通过参数`heartBeat`进行区分。当为续约请求时， Nacos不会对请求中的元数据等内容进行解析，即续约请求将会忽略传入的`healthy`,`weight`,`enabled`,`metadata` 字段。 当续约请求返回的错误码为`21003` 时，说明该实例已过期被移除，需要重新进行注册，此时客户端应带上完整的信息，同时设置`heartBeat=false`进行重新注册，重新注册成功后再进行续约请求。若连续调用注册请求，也可以起到`续约实例`的作用，但是是通过`更新实例`的方式进行续约，会耗费更多的性能，因此请在注册成功后进行续约操作而非继续进行注册更新。
nacos.client.naming.instance.api.deregister.summary=注销服务实例
nacos.client.naming.instance.api.deregister.description=从一个指定服务中注销实例。
nacos.client.naming.instance.api.list.summary=查询服务实例列表
nacos.client.naming.instance.api.list.description=查询指定服务下的实例列表。**注意：**由于Nacos3.X即将移除UDP类型的推送支持，因此对于不支持Grpc长连接推送的客户端，需要定期进行一次实例列表的拉取，以保证客户端能及时感知到实例列表的变化，以实现订阅服务的功能。

# ConfigOpenApiController
nacos.client.config.config.api.controller.name=Nacos配置中心相关API
nacos.client.config.config.api.controller.description=**Nacos配置中心的HTTP 客户端API，用于获取配置信息操作。注意：**Nacos 3.X 的HTTP 客户端API 不提供配置的发布和删除接口，`普通应用`、`微服务应用`，以及其他 `非管控类` 和 `非网关类` 应用**应该** 为配置的使用方而非发布方；若需要进行配置发布和删除操作，请使用`运维 API`。
nacos.client.config.config.api.get.summary=查询配置内容
nacos.client.config.config.api.get.description=查询指定配置的详细内容。**注意：**由于Nacos 3.X 即将移除配置长轮询监听相关的功能，仅保留通过长连接进行配置监听，因此Nacos 3.X 的HTTP 客户端API 不提供配置的监听接口。您可以通过轮询`获取配置`，比对前后的`md5`来判断是否需要更新配置。

# Admin OpenAPI basic information
nacos.admin.api.title=Nacos 运维 API
nacos.admin.api.description=Nacos 运维 API openAPI(swagger) 类型文档，用于Nacos运维人员进行问题排查，集群控制等操作，同时为`管控类`和`网关类`应用提供范围型数据查询的能力。

# ServerStateController
nacos.admin.core.state.api.controller.name=Nacos引擎状态相关API
nacos.admin.core.state.api.controller.description=获取Nacos引擎状态的相关API，提供Nacos集群状态信息及健康状态等。
nacos.admin.core.state.api.state.summary=获取Nacos集群状态信息
nacos.admin.core.state.api.state.description=通过该接口，可以获取到Nacos 集群的基础状态和开关信息，例如：版本号，运行模式，鉴权是否开启等；该接口不会返回Nacos 集群的节点信息。
nacos.admin.core.state.api.liveness.summary=获取Nacos集群的存活状态
nacos.admin.core.state.api.liveness.description=通过该接口，可以获取Nacos集群的存活状态，Nacos集群是否可正常接受和响应请求。
nacos.admin.core.state.api.readiness.summary=获取Nacos集群的可读状态
nacos.admin.core.state.api.readiness.description=通过该接口，可以获取Nacos集群的是否处于可读取状态，即Nacos集群是否可以读取到数据。

# ServerLoaderControllerV3
nacos.admin.core.loader.api.controller.name=Nacos引擎连接负载相关API
nacos.admin.core.loader.api.controller.description=Nacos集群连接负载的相关API，提供Nacos集群连接负载的统计、连接详情及各类连接均衡的能力。
nacos.admin.core.loader.api.list.summary=查询当前节点连接列表
nacos.admin.core.loader.api.list.description=通过该接口，可以获取连接到当前Nacos Server节点中的gRPC连接详情。
nacos.admin.core.loader.api.reload.batch.summary=均衡指定数量的连接
nacos.admin.core.loader.api.reload.batch.description=通过该接口，可以指定一定数量的连接到当前Nacos Server节点中的gRPC连接，将这部分连接断开后迁移到其他Nacos Server节点中。
nacos.admin.core.loader.api.reload.smart.summary=自动均衡集群中的连接
nacos.admin.core.loader.api.reload.smart.description=通过该接口，可以让Nacos根据各个节点的负载情况，自动将连接迁移到其他Nacos Server节点中。
nacos.admin.core.loader.api.reload.single.summary=均衡指定的单个连接
nacos.admin.core.loader.api.reload.single.description=通过该接口，可以将指定的客户端连接(gRPC连接)迁移到其他Nacos Server节点中。
nacos.admin.core.loader.api.metrics.summary=查询集群连接概览信息
nacos.admin.core.loader.api.metrics.description=通过该接口，查看Nacos Server集群中各节点的连接数概览。

# NamespaceControllerV3
nacos.admin.core.namespace.api.controller.name=Nacos集群命名空间相关API
nacos.admin.core.namespace.api.controller.description=Nacos集群命名空间相关操作，获取命名空间列表，获取命名空间详情，创建命名空间，更新命名空间，删除命名空间，校验命名空间存在等。
nacos.admin.core.namespace.api.list.summary=获取Nacos命名空间列表
nacos.admin.core.namespace.api.list.description=通过该接口，可以获取当前Nacos集群的命名空间列表。
nacos.admin.core.namespace.api.get.summary=获取命名空间详情
nacos.admin.core.namespace.api.get.description=通过该接口，可以获取指定命名空间的详情。
nacos.admin.core.namespace.api.create.summary=创建新命名空间
nacos.admin.core.namespace.api.create.description=通过该接口，可以创建新的命名空间。
nacos.admin.core.namespace.api.update.summary=更新命名空间
nacos.admin.core.namespace.api.update.description=通过该接口，可以更新命名空间的信息，无法更新命名空间ID，仅能更新命名空间的名称和描述。
nacos.admin.core.namespace.api.delete.summary=删除命名空间
nacos.admin.core.namespace.api.delete.description=通过该接口，可以删除命名空间。默认命名空间`public`无法被删除。
nacos.admin.core.namespace.api.check.summary=检查命名空间是否存在
nacos.admin.core.namespace.api.check.description=通过该接口，可以检查命名空间ID是否存在。应该在创建命名空间前调用，确认自定义的命名空间ID是否已经存在，以防冲突。

# NacosClusterControllerV3
nacos.admin.core.cluster.api.controller.name=Nacos引擎集群相关API
nacos.admin.core.cluster.api.controller.description=获取Nacos集群所对应的Nacos集群的集群信息
nacos.admin.core.cluster.api.node.self.summary=获取当前Nacos节点运行信息
nacos.admin.core.cluster.api.node.self.description=通过该接口，可以获取当前Nacos节点的运行信息，包括节点ip，节点运行状态，节点元数据等。
nacos.admin.core.cluster.api.node.list.summary=获取Nacos节点列表运行信息
nacos.admin.core.cluster.api.node.list.description=通过该接口，可以获取集群中所有Nacos节点运行信息，包括节点ip，节点运行状态，节点元数据等。
nacos.admin.core.cluster.api.node.update.summary=更新Nacos节点信息
nacos.admin.core.cluster.api.node.update.description=通过该接口，可以更新当前节点中的Nacos节点列表的详细信息。**注意：** 该接口会覆盖当前节点中列表中的详细信息，仅更新传入的节点中存在于集群中的节点，并`不能`通过此接口添加和减少集群中的节点。同时，Nacos自身的健康探测`report`任务也会对当前节点中列表中的节点进行健康探测及更新详细信息，若调用此接口后，探测任务发现节点信息有变更，则任务也会覆盖当前节点中列表中的节点信息。
nacos.admin.core.cluster.api.lookup.update.summary=更新Nacos集群的地址发现模式
nacos.admin.core.cluster.api.lookup.update.description=通过该接口，可以更新当前节点发现其他Nacos集群节点的模式，根据启动方式默认为`file`(集群模式）或`standalone`（单机模式），其他可选值有`address-server`。

# CoreOpsControllerV3
nacos.admin.core.ops.api.controller.name=Nacos引擎核心运维操作相关API
nacos.admin.core.ops.api.controller.description=对Nacos集群的核心运维操作，如：执行Nacos集群的Raft命令、获取Nacos集群的ID生成器信息、修改Nacos集群的日志级别等。
nacos.admin.core.ops.api.raft.summary=Raft 相关操作
nacos.admin.core.ops.api.raft.description=通过该接口，可以对Nacos Server集群中的Raft协议进行部分运维操作，如执行快照，主动选主等。
nacos.admin.core.ops.api.ids.summary=获取ID生成器信息
nacos.admin.core.ops.api.ids.description=通过该接口，获取ID生成器的当前ID,workerId. 只有使用内置数据库时该接口才会返回有效数据.
nacos.admin.core.ops.api.log.summary=动态修改Nacos Core相关日志级别
nacos.admin.core.ops.api.log.description=通过该接口，可以在不重启Nacos Server的情况下，动态修改Nacos Core相关日志级别的配置。

# ServiceControllerV3
nacos.admin.naming.service.api.controller.name=Nacos注册中心服务相关API
nacos.admin.naming.service.api.controller.description=Nacos注册中心服务相关操作，包括创建服务，删除服务，查询服务列表，查询服务详情，查询服务订阅者列表等。
nacos.admin.naming.service.api.create.summary=创建服务
nacos.admin.naming.service.api.create.description=通过该接口，可以创建一个空服务。
nacos.admin.naming.service.api.delete.summary=删除服务
nacos.admin.naming.service.api.delete.description=通过该接口，可以删除一个服务。 **注意此接口为删除服务，而不是删除服务实例（服务提供者），且当服务下还有服务实例存在时，服务会无法删除。**
nacos.admin.naming.service.api.update.summary=更新服务元数据
nacos.admin.naming.service.api.update.description=通过该接口，可以更新一个服务的元数据。仅能更新服务的元数据，如`metadata`、`selector` 等。服务的`serviceName`、`groupName`、`namespaceId`等不能更新。
nacos.admin.naming.service.api.selector.summary=获取支持的服务路由选择器类型列表
nacos.admin.naming.service.api.selector.description=通过该接口，可以获取支持的服务路由选择器类型列表.
nacos.admin.naming.service.api.subscribers.summary=查询服务的订阅者列表
nacos.admin.naming.service.api.subscribers.description=通过该接口，可以查询指定服务下的订阅者列表。
nacos.admin.naming.service.api.list.summary=查询服务列表
nacos.admin.naming.service.api.list.description=通过该接口，可以查询指定命名空间下的服务列表。基于参数`withInstances`的不同，接口的返回内容可能不同，参数为`true`时，返回的列表中包含服务实例，对象为`ServiceDetailInfo`；参数为`false`时，返回的列表中不包含服务实例，对象为`ServiceView`；
nacos.admin.naming.service.api.get.summary=查询服务详情
nacos.admin.naming.service.api.get.description=通过该接口，可以查询指定服务详情。

# ClusterControllerV3
nacos.admin.naming.service.api.update.cluster.summary=更新服务集群元数据
nacos.admin.naming.service.api.update.cluster.description=通过该接口，可以更新指定服务集群的元数据。

# InstanceControllerV3
nacos.admin.naming.instance.api.controller.name=Nacos注册中心服务实例相关API
nacos.admin.naming.instance.api.controller.description=Nacos注册中心服务实例相关操作，包括查询服务实例列表，更新服务实例元数据。
nacos.admin.naming.instance.api.register.summary=注册实例
nacos.admin.naming.instance.api.register.description=注册一个新的实例到指定服务。
nacos.admin.naming.instance.api.deregister.summary=注销实例
nacos.admin.naming.instance.api.deregister.description=从指定服务中注销一个实例。
nacos.admin.naming.instance.api.update.summary=更新实例元数据
nacos.admin.naming.instance.api.update.description=通过该接口，可以更新指定服务的实例元数据，包括`权重(weight)`和`上下线状态(enabled)`；`无法更新实例的服务名(serviceName)`、`分组名(groupName)`、`命名空间(namespace)`、`IP`及`端口(port)`。
nacos.admin.naming.instance.api.update.batch.summary=批量更新实例元数据
nacos.admin.naming.instance.api.update.batch.description=批量更新指定实例的元数据。
nacos.admin.naming.instance.api.delete.batch.summary=批量删除实例元数据
nacos.admin.naming.instance.api.delete.batch.description=批量删除指定实例的元数据。
nacos.admin.naming.instance.api.partial.summary=部分更新实例
nacos.admin.naming.instance.api.partial.description=部分更新指定实例的信息。 **注意：**不同于更新实例，该接口支持部分更新实例信息，例如：先使用`k1=v1`更新元数据，再使用`k2=v2` 更新元数据，此时读取到的元数据为`k1=v1,k2=v2`。
nacos.admin.naming.instance.api.list.summary=查询服务的实例列表
nacos.admin.naming.instance.api.list.description=通过该接口，可以查询指定服务的实例列表。
nacos.admin.naming.instance.api.get.summary=查询实例详情
nacos.admin.naming.instance.api.get.description=查询指定实例的详细信息。

# HealthControllerV3
nacos.admin.naming.health.api.controller.name=Nacos注册中心服务实例健康检查相关API
nacos.admin.naming.health.api.controller.description=Nacos注册中心服务实例健康检查相关操作，包括更新服务实例健康状态，查询服务实例健康检查类型等。
nacos.admin.naming.health.api.update.summary=更新实例健康状态
nacos.admin.naming.health.api.update.description=更新指定实例的健康状态。**注意：**仅对`持久化服务`的实例有效， 且该服务的`健康检查方式为NONE`。 因为临时实例的健康状态由连接（客户端）维护，其他健康检查类型的持久化服务，健康检查任务会自动维护健康状态，即使更新成功了，也很快会被健康检查任务重制。
nacos.admin.naming.health.api.checkers.summary=获取所有健康检查器
nacos.admin.naming.health.api.checkers.description=获取系统中支持的所有健康检查器类型及其配置。

# ClientControllerV3
nacos.admin.naming.client.api.controller.name=Nacos注册中心客户端信息相关API
nacos.admin.naming.client.api.controller.description=Nacos注册中心客户端信息相关操作，可以获取客户端列表，客户端详情，以及查询客户端所注册和订阅的服务，也可以通过服务来反向查询哪些客户端注册和订阅了目标服务。**说明：**上文及API说明中提及的`客户端`为Nacos注册中心的一个抽象概念，它们可以被理解为`Nacos客户端`和Nacos注册中心的交互的通道连接。
nacos.admin.naming.client.api.list.summary=查询所有客户端列表
nacos.admin.naming.client.api.list.description=查询所有客户端的列表。
nacos.admin.naming.client.api.get.summary=查询客户端详细信息
nacos.admin.naming.client.api.get.description=根据客户端ID查询客户端的详细信息。
nacos.admin.naming.client.api.publish.list.summary=查询客户端注册的服务列表
nacos.admin.naming.client.api.publish.list.description=查询指定客户端注册的服务列表。
nacos.admin.naming.client.api.subscribe.list.summary=查询客户端订阅的服务列表
nacos.admin.naming.client.api.subscribe.list.description=查询指定客户端订阅的服务列表。
nacos.admin.naming.client.api.service.publisher.list.summary=查询注册指定服务的客户端列表
nacos.admin.naming.client.api.service.publisher.list.description=查询注册指定服务的客户端列表。
nacos.admin.naming.client.api.service.subscriber.list.summary=查询订阅指定服务的客户端列表
nacos.admin.naming.client.api.service.subscriber.list.description=查询订阅指定服务的客户端列表。
nacos.admin.naming.client.api.distro.summary=查询客户端的负责Nacos节点
nacos.admin.naming.client.api.distro.description=根据客户端的IP和端口查询其负责的服务器，仅针对持久化服务实例或通过运维API注册的临时实例。**注意：使用2.X以上客户端注册的临时实例无法通过此接口定位负责服务器节点。**

#OperatorControllerV3
nacos.admin.naming.ops.api.controller.name=Nacos注册中心运维相关API
nacos.admin.naming.ops.api.controller.description=Nacos注册中心运维相关操作，包括查询和修改Nacos注册中心运维开关、修改Nacos注册中心日志级别、查询Nacos注册中心运维指标等。
nacos.admin.naming.ops.api.switches.get.summary=查看Naming模块的相关开关
nacos.admin.naming.ops.api.switches.get.description=通过该接口，可以查看Nacos Naming模块的相关开关。
nacos.admin.naming.ops.api.switches.update.summary=修改Naming模块的相关开关
nacos.admin.naming.ops.api.switches.update.description=通过该接口，可以修改Nacos Naming模块的相关开关。
nacos.admin.naming.ops.api.metrics.summary=查询系统当前数据指标
nacos.admin.naming.ops.api.metrics.description=通过该接口，可以查询系统当前数据指标。
nacos.admin.naming.ops.api.log.summary=修改日志级别
nacos.admin.naming.ops.api.log.description=通过该接口，可以动态修改指定日志的级别。

#ConfigControllerV3 & ListenerControllerV3
nacos.admin.config.config.api.controller.name=Nacos配置中心相关API
nacos.admin.config.config.api.controller.description=Nacos配置中心相关操作，获取配置列表，获取配置详情，发布配置，删除配置，批量删除配置，搜索配置，监听配置，导出配置，导入配置等。
nacos.admin.config.config.api.get.summary=获取配置详情
nacos.admin.config.config.api.get.description=通过该接口，可以获取指定配置的详情。
nacos.admin.config.config.api.publish.summary=发布配置
nacos.admin.config.config.api.publish.description=通过该接口，可以创建新的配置或更新已有配置。
nacos.admin.config.config.api.delete.summary=删除配置
nacos.admin.config.config.api.delete.description=通过该接口，可以删除指定配置。
nacos.admin.config.config.api.delete.batch.summary=批量删除配置
nacos.admin.config.config.api.delete.batch.description=通过该接口，可以批量删除指定配置。
nacos.admin.config.config.api.list.summary=查询配置列表
nacos.admin.config.config.api.list.description=通过该接口，可以查询指定命名空间下的配置列表。
nacos.admin.config.config.api.search.summary=通过配置内容查询配置
nacos.admin.config.config.api.search.description=通过该接口，可以通过配置内容查询对应配置的列表。**注意：此接口性能较低，过多调用容易造成稳定性问题，请尽量使用其他接口。**
nacos.admin.config.config.api.listener.summary=查询配置的监听者列表
nacos.admin.config.config.api.listener.description=通过该接口，可以查询指定配置的监听者列表。
nacos.admin.config.config.api.listener.ip.summary=查询某个订阅者IP订阅了哪些配置
nacos.admin.config.config.api.listener.ip.description=通过该接口，可以查询某个订阅者IP订阅了哪些配置。
nacos.admin.config.config.api.export.summary=导出配置
nacos.admin.config.config.api.export.description=通过该接口，可以将所选或所查询的配置，导出的配置为zip文件，进行备份或导入到其他Nacos集群。使用时建议分开使用 `ids` 和 `dataId + groupName` 的组合，只选择一种方式，另一类传入空字符串，否则可能导致导出文件为空内容。
nacos.admin.config.config.api.import.summary=导入配置
nacos.admin.config.config.api.import.description=通过该接口，可以将从Nacos导出的zip文件导入到Nacos的指定命名空间中。**注意：目前导入配置接口能够同时支持旧版本导出的zip文件和新版本导出的zip文件，但后续版本将会移除对旧版本格式导入导出配置的支持，建议使用新的导出配置 接口进行配置文件的导出。**
nacos.admin.config.config.api.import.body.description=需要使用通过导出配置获取的`zip文件`，若使用自行创建的`zip文件`，请确定内容格式**必须**和通过导出配置获取的`zip文件`一致，不能有额外的目录结构和隐藏文件，否则会导入失败。
nacos.admin.config.config.api.clone.summary=克隆配置
nacos.admin.config.config.api.clone.description=通过该接口，可以将所选或所查询的配置克隆到其他命名空间。
nacos.admin.config.config.api.delete.beta.summary=停止配置BETA发布
nacos.admin.config.config.api.delete.beta.description=通过该接口，可以将配置从BETA发布状态停止，即回滚配置的Beta发布状态。**注意：只有在发布配置时设置了Header的betaIps后，将配置变更为BETA发布中的状态，调用此接口才能停止BETA发布状态。**
nacos.admin.config.config.api.get.beta.summary=查询配置Beta发布状态
nacos.admin.config.config.api.get.beta.description=通过该接口，可以查询配置的BETA发布状态。**注意：只有在发布配置时设置了Header的betaIps后，将配置变更为BETA发布中的状态，调用此接口才能停止BETA发布状态。**

# HistoryControllerV3
nacos.admin.config.history.api.controller.name=Nacos配置历史相关API
nacos.admin.config.history.api.controller.description=Nacos配置中心的配置历史版本相关操作，包括获取配置历史版本列表，获取配置历史版本详情等。
nacos.admin.config.history.api.get.summary=查询配置的某次历史变更记录
nacos.admin.config.history.api.get.description=通过该接口，可以查询配置的某次历史变更记录。
nacos.admin.config.history.api.list.summary=查询配置发布历史
nacos.admin.config.history.api.list.description=通过该接口，可以查询配置的发布历史。
nacos.admin.config.history.api.previous.summary=查询配置最新状态的前一次变更历史
nacos.admin.config.history.api.previous.description=通过该接口，可以查询配置最新状态的前一次变更历史。
nacos.admin.config.history.api.names.summary=查询命名空间下的配置列表
nacos.admin.config.history.api.names.description=通过该接口，可以查询命名空间下的配置列表，仅查询`dataId`和`groupName`，用于配置历史UI的下拉选择。

# CapacityControllerV3
nacos.admin.config.capacity.api.controller.name=Nacos配置容量相关API
nacos.admin.config.capacity.api.controller.description=Nacos配置中心的配额容量相关操作，包括获取配置容量信息，修改配置容量信息等。
nacos.admin.config.capacity.api.get.summary=查询容量信息
nacos.admin.capacity.config.api.get.description=查询指定分组或命名空间的容量信息
nacos.admin.config.capacity.api.update.summary=更新容量信息
nacos.admin.capacity.config.api.update.description=更新指定分组或命名空间的容量信息。如果容量信息未初始化，则会自动初始化

# ConfigOpsControllerV3
nacos.admin.config.ops.api.controller.name=Nacos配置中心运维相关API
nacos.admin.config.ops.api.controller.description=Nacos配置中心的运维相关操作，包括手动动触发本地缓存更新，修改日志级别，执行Derby数据库SQL，导入Derby数据库数据等。
nacos.admin.config.ops.api.localCache.summary=手动触发本地缓存更新
nacos.admin.config.ops.api.localCache.description=手动触发从存储中加载所有配置数据到本地缓存。
nacos.admin.config.ops.api.log.summary=设置日志级别
nacos.admin.config.ops.api.log.description=动态设置指定模块的日志级别
nacos.admin.config.ops.api.derby.summary=执行Derby数据库操作
nacos.admin.config.ops.api.derby.description=执行Derby数据库的查询操作（仅支持 `SELECT` 语句）**注意：** 此接口需要开启`nacos.config.derby.ops.enabled`配置，且数据库为`Derby`时才可使用，仅提供给运维人员进行Derby数据库排查数据问题时使用。
nacos.admin.config.ops.api.derby.import.summary=导入Derby数据库数据
nacos.admin.config.ops.api.derby.import.description=从外部数据源导入数据到Derby数据库**注意：** 此接口需要开启`nacos.config.derby.ops.enabled`配置，且数据库为`Derby`时才可使用，仅提供给运维人员进行Derby数据库排查数据问题时使用。

# MetricsControllerV3
nacos.admin.config.metrics.api.controller.name=Nacos配置中心客户端监控相关API
nacos.admin.config.metrics.api.controller.description=Nacos配置中心的客户端监控相关操作，包括获取集群客户端指标，获取本地客户端指标等。
nacos.admin.config.metrics.api.cluster.summary=获取集群客户端指标
nacos.admin.config.metrics.api.cluster.description=获取集群中指定 IP 客户端的配置指标信息
nacos.admin.config.metrics.api.ip.summary=获取本地客户端指标
nacos.admin.config.metrics.api.ip.description=获取本地机器上指定 IP 客户端指标信息
